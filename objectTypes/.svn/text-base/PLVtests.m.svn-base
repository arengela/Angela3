classdef PLVtests<handle
    properties
        allfiles
        test
        baselinePLV
        electrodeXY
        
    end
    
    
    methods
            function handles=PLVtests(test,n,e,N,ch)
            %Initialize
                allfiles=    {
                     'E:\DelayWord\EC18\EC18_B1';
                    'E:\DelayWord\EC18\EC18_B2';
                    'E:\DelayWord\EC20\EC20_B18';
                    'E:\DelayWord\EC20\EC20_B23';
                    'E:\DelayWord\EC20\EC20_B54';
                    'E:\DelayWord\EC20\EC20_B64';
                    'E:\DelayWord\EC20\EC20_B67';
                    'E:\DelayWord\EC21\EC21_B1';
                    'E:\DelayWord\EC22\EC22_B1'
                    
                    }
               % n=9;
                seg={[repmat(41,[1 40]);1:40],[1:40;repmat(42,[1 40])],[42;43],[43;44],[44 45],...
                    [[4,5,6,7,8,11,13,14,15,16,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40];repmat([42],[1,30])],...    
                     [repmat([42;43],[1,30]);[4,5,6,7,8,11,13,14,15,16,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40]]...
                     [repmat([44;45],[1,30]);[4,5,6,7,8,11,13,14,15,16,17,18,19,21,22,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40]]}


                if  strfind(test,'new')
                
                    %load('E:\DelayWord\EC22\EC22_B1\activech')

                    handles.test=SegmentedData([allfiles{n} '/HilbReal_4to200_40band'],[],0);                
                     handles.test.usechans=ch;%1:256%unique([activech{5} activech{2}])
                     handles.test.channelsTot=length(handles.test.usechans);

                     handles.test.Params.sorttrials=0;
                    
                    
                    if  strfind(test,'load')
                         handles.test.segmentedDataEvents40band(seg(e),{[2500 2500],[2500 2500],[2500 2500]},'keep',N,'complex')
                    end
                end
                    
%                 
            end
            
                function handles=doPACs(handles)
                    test=handles.test;
                    lowfreqs=2:30;
                    highfreqs=32;
                   
                    for e=1:length(test.segmentedEcog)
                       for s=1:4

                        handles.test.segmentedEcog(e).pac(s).PAC=zeros(test.channelsTot,length(lowfreqs),length(highfreqs),size(test.segmentedEcog(e).phase,4));
                        handles.test.segmentedEcog(e).pa(s).ave_amp_phase=zeros(test.channelsTot,length(lowfreqs),length(highfreqs),size(test.segmentedEcog(e).phase,4),99);
                             samps=(2000/5)*s-100:(2000/5)*s+399;
                            for t=1:size(test.segmentedEcog(e).phase,4)
                                for low=1:length(lowfreqs)
                                    for high=1:length(highfreqs)
                                        [handles.test.segmentedEcog(e).pac(s).PAC(:,low,high,t),handles.test.segmentedEcog(e).pac(s).ave_amp_phase(:,low,high,t,:)]...
                                            =PAC_preprocesseddata(test.segmentedEcog(e).phase(:,samps,:,t),lowfreqs(low),highfreqs(high));
                                    end
                                end
                            end
                         end
                    end
                end
                    
                    
                function handles=doBaslinePACs(handles)
                    test=handles.test;
                    lowfreqs=2:30;
                    highfreqs=32;
                    
                    bl=size(test.ecogBaseline.data,2);
                    
                    %for t=1:9
                        %tmp=ceil(bl/10);
                        %samps=tmp*(t-1)+1:tmp*t;
                       t=1; 
                        for low=1:length(lowfreqs)
                            for high=1:length(highfreqs)
                                [handles.test.ecogBaseline.pac(1).PAC(:,low,high,t),handles.test.ecogBaseline.pac(1).ave_amp_phase(:,low,high,t,:)]...
                                    =PAC_preprocesseddata(test.ecogBaseline.data(:,:,:),lowfreqs(low),highfreqs(high),0);
                            end
                        end
                    %end
                    
                    
                    
                end
            
                function loadBaseline(handles,baselinePath,output)
                    test=handles.test;
                    test.loadBaselineFolder(baselinePath,'complex');
                    handles.test=test;
                end
                    
                    
            function loadSavedImages(handles,saveloc)
                cd(saveloc);
                contents=cellstr(ls);
                f1=figure;
                idx=3;
                save_file='C:\Users\Angela_2\Documents\Presentations\DelayWordAutoImages4.ppt';
                powerpoint_object=SAVEPPT2(save_file,'init')
                while idx<=length(contents)
                    f1=openfig(contents{idx},'reuse')
                    r=input('next (s/k/[n]','s');
                    switch r
                        case 's'
                            SAVEPPT2('ppt',powerpoint_object);
                            
                        case 'k'
                            keyboard;
                        otherwise
                            idx=idx+1;
                    end
                    close
                end
                            
                    
                    
            end
             
            
            function doCompare(handles,saveloc)
                test=handles.test;
                save_file='C:\Users\Angela_2\Documents\Presentations\DelayWordAutoImages5.ppt'
                powerpoint_object=SAVEPPT2(save_file,'init')

                %% Look at PLV of 1 chan compared to all other chan for entire timeseries

                f1=figure
                f2=figure
                data=zeros(1,256);
                timeInt=1200:1400;
                for timeInt=400%1:200:2200
                    for f=1:40
                        figure(f1)
                        dataplv=pn_eegPLV_modified(squeeze(test.segmentedEcog(1).phase(:,:,f,:)),400,[],[]);
%                         for ch=1:test.channelsTot
%                             subplot(2,1,1)
% 
%                             handles.comparePLVchans(dataplv,ch,timeInt:timeInt+399);
% %                             SAVEPPT2('ppt',powerpoint_object,'n',['PLV ch= ' int2str(ch) 'f= ' int2str(f) 'event ' int2str(test.eventParams.subsetLabel{1}(1))]);
%                             title(['ch ' int2str(test.usechans(ch)) 'f ' int2str(f)])
%                             set(gcf,'Name',(['ch ' int2str(test.usechans(ch)) 'f ' int2str(f)]))
% 
%                         %cd(saveloc)
%                         %saveas(gcf,['c' int2str(ch) 'f' int2str(f) 't' int2str(timeInt(1)) 'e' int2str(test.eventParams.subsetLabel{1}(1))],'fig')
%                            input('n')
%                             %saveas(gcf,['ch' int2str(ch) 'f' int2str(f) 't' int2str(timeInt(1))],'fig')
% 
%                         end

                        figure(f2)
                        
                        handles.visualizePLVconnections(dataplv,f);
                        %cd(saveloc)
                        %saveas(gcf,['f' int2str(f) 't' int2str(timeInt(1)) 'e' int2str(test.eventParams.subsetLabel{1}(1))],'fig')
%                         SAVEPPT2('ppt',powerpoint_object,'n',['PLV ch= 1:256' ...
%                             'f= ' int2str(f) 'time= ' int2str([timeInt(1) timeInt(end)]) 'e' int2str(test.eventParams.subsetLabel{1}(1))]);
%                            
                        %input('next')          
                    end
                end
            end

            function comparePLVchans(handles,dataplv,ch,calcInt)
                
                test=handles.test;
               data=zeros(1,test.channelsTot);
                tmp=squeeze((squeeze(dataplv(:,ch,:))+dataplv(:,:,ch)))';
                imagesc(tmp)
                line([1200 1200],[0 test.channelsTot])
                %colorbar

                subplot(2,1,2)
                mtmp=mean(tmp(:,calcInt),2);
                %imagesc(reshape(mtmp,[16,16])')
                %plot(mtmp)

                ch_hold=find(mtmp>.3);
                %data(test.usechans)=mtmp;
                data=mtmp
                %     hold on
                %     plot(ch_hold,mtmp(ch_hold),'ro')
                visualizeGrid(1,['E:\General Patient Info\' test.patientID '\brain+grid_3Drecon_cropped.jpg'],test.usechans,data)

                title(int2str(ch_hold'))
            end
            
            
            
            function doVis(handles)
                %% visualize connections on brain pic
                test=handles.test;


                visualizeGrid(2,['E:\General Patient Info\' test.patientID '\brain+grid_3Drecon_cropped.jpg'],test.usechans)
                C2 = nchoosek(1:test.channelsTot,2)
                connectStrength=zeros(1,size(C2,1));
                %load('E:\General Patient Info\EC22\regdata.mat')
                cM= jet
                ELECTRODE_HEIGHT=2;
                bounds=[.2 -.3]
                boundcolors={'g' 'r','b'}
                timeInt=1200:1600;
                for f=1:40
                    visualizePLVconnections
                    input('next')
                end
            end

            function visualizePLVconnections(handles,dataplv,f)
                
                bounds=[.5];
                test=handles.test;
                boundcolors{1}='g'
                bPLV=handles.baselinePLV;
                        C2 = nchoosek(1:test.channelsTot,2)
                        connectStrength=zeros(1,size(C2,1));
                        %lload('E:\General Patient Info\EC22\regdata.mat')


                subplot(1,2,1)
                visualizeGrid(2,['E:\General Patient Info\' test.patientID '\brain+grid_3Drecon_cropped.jpg'],test.usechans)
                %keyboard

                %dataplv=pn_eegPLV_modified(squeeze(test.segmentedEcog(1).phase(:,timeInt,f,:)),400,[],[]);
                tmp3=squeeze(mean(dataplv,1)-bPLV(f).mean(1,test.usechans,test.usechans))./squeeze(bPLV(f).std(1,test.usechans,test.usechans));
                %tmp3=squeeze(mean(dataplv,1)-bPLV(f).mean(1,test.usechans,test.usechans));

                %tmp3=squeeze(mean(dataplv(1:400,:,:),1))-squeeze(mean(dataplv(401:800,:,:),1));
                %tmp3=squeeze(bPLV(f).mean(1,test.usechans,test.usechans));
                for i=1:size(C2,1)
                    connectStrength(1,i)=    tmp3(C2(i,1),C2(i,2));
                end
                cM=jet;
                ELECTRODE_HEIGHT=2;
                %Y = prctile(connectStrength,95)
                for idx=1
                    Y=bounds(idx);

                    Y = prctile(connectStrength,99)

                    linecolor=boundcolors{idx};

                    if idx==1
                        keep=find(connectStrength>Y)
                    else
                         keep=find(connectStrength<Y)
                    end
                    displayStruct.chanPairs=test.usechans(C2(keep,:))
                    displayStruct.connectionStrength=connectStrength(keep)';
                    

                    xy=handles.electrodeXY;
                    y=xy(1,:)
                    x=xy(2,:)

                    handles.baselinePLV(f).sigch= displayStruct.chanPairs;   
                    cmapPos = ceil(size(cM, 1)/2)*ones(size(keep, 2), 1);

                    for kk = 1:length(keep)
                        plot3(y(displayStruct.chanPairs(kk, :)), x(displayStruct.chanPairs(kk, :)), [ELECTRODE_HEIGHT, ELECTRODE_HEIGHT], 'LineWidth', 2, 'Color', linecolor);
                        hold on
                    end
                end
                title(int2str(f))
                hold off

                %keyboard
                    subplot(1,2,2)
                        imagesc(tmp3,[-1 1])

                %imagesc(tmp3,[-1 1])
                set(gca,'XTick',1:41);
                 set(gca,'YTick',1:41);
                set(gca,'XTickLabel',test.usechans);
                set(gca,'YTickLabel',test.usechans);

                colorbar
                hold off
            end
        
    end
end
%%