function make_raERPs_nback12_bootci_bse5 (subjnum,sbcnd,fband)%Makes raERPs for Eddie's N-back study. "1" "2" are standards vs. targets%sbcnd is 0-, 1-, or 2-back, or passive (3)%It makes two raERPs: one for "standards" (1, no response, so technically no%ra), and one for "targets" (2, response trials). For 0-b, the standards are%all /uu/ and /wa/ stimuli. For 1-b, the standards are all preceding%stimuli (since same acoustic-phonetic category given the task). For 2-b,%the standards are all stimuli 2 back.%%This version does bootstrap confidence intervals on each test-sample to%see if its value is greater (less) than the max (min) of the baseline.%This is similar to testing if it is different from 0, but instead tests%more conservatively against max/min. Nice feature: could be used when%there is no baseline (estimate max/min) from time-permuting the events).%The BCa method of bias-correction is used, see p. 186 and p. 216.%%This "bs" version corrects for the baseline (./bslev) in each single trial%before doing anything else.%%This "bse" version uses the bootstrap standard error as a "good-enough"%belt for defining the baseline null hypothesis.%%The 2-cond comparison also uses the bse as a "good-enough" belt and tests%the bootstrap confidence intervals against the bse.%%This version is explained in NeuronDraft_SupplMethods_EE4.docx.%%The "5" is because in this version, I base the bse on the mean of the five%samples in each 20 ms window.if nargin<3, fband=5; enddo_stats=1; nboot=10000; %do 1-condition (vs. baseline) statsdo_stats2=1; nboot2=10000; %do 2-cond (targs vs. non-targs) statsif sbcnd==3, do_stats2=0; endsubjstr=['GP' int2str(subjnum)]; srate=2003;%cd(['C:\Intrac\Subjs\' subjstr '\Artrejs']); load badchans; load ref; load nvarchans;nvarchans=0;ref=[];badchans=[];goodchans=setdiff(1:64+nvarchans,[badchans ref]); nchans=length(goodchans);cnd=5; %cd(['C:\Intrac\Subjs\' subjstr '\Trialslogs\Conds\' int2str(cnd)]);switch subjnum    case 1, targs=4; nontargs=[3 5]; epch=[501 2404]; ERP_Xd=-248:4:1200;        if sbcnd==3, epch=[501 1403]; ERP_Xd=-248:4:700; end        if sbcnd==3, bnum=4; elseif sbcnd==0, bnum=12; else bnum=13; end    case 2, targs=4; nontargs=[3 5]; epch=[501 2404]; ERP_Xd=-248:4:1200;        if sbcnd==3, epch=[501 1403]; ERP_Xd=-248:4:700; end        if sbcnd==3, bnum=17; elseif sbcnd==0, bnum=13; else bnum=12; end    case 5, targs=4; nontargs=[3 5]; epch=[501 2404]; ERP_Xd=-248:4:1200;        if sbcnd==3, bnum=13; elseif sbcnd==0, bnum=14; else bnum=15; end    case 6, targs=5; nontargs=[3 4]; epch=[501 2604]; ERP_Xd=-248:4:1300;        if sbcnd==3, bnum=14; elseif sbcnd==0, bnum=15; else bnum=16; end    case 7, targs=5; nontargs=[3 4]; epch=[501 2604]; ERP_Xd=-248:4:1300;        if sbcnd==3, bnum=4; elseif sbcnd==0, bnum=17; else bnum=18; endend%load(['C:\Intrac\Subjs\' subjstr '\Cardat\gdat' int2str(bnum)]); load('ecogDSdata.mat')gdat=ecogDSdata;T=size(gdat,2);if nvarchans>0, load(['C:\Intrac\Subjs\' subjstr '\Cardat\vdat' int2str(bnum)]); endif fband<10    frange=[70 160]; minf=frange(1); maxf=frange(2); a=[log10(.39); .5];    f0=0.018; octspace=1/7; maxfo=log2(maxf/f0); cfs=f0;    while log2(cfs(end)/f0)<maxfo        cfo=log2(cfs(end)/f0); cfo=cfo+octspace; cfs=[cfs f0*(2^(cfo))];    end    cfs=cfs(cfs>=minf & cfs<=maxf); npbs=length(cfs);    sigma_fs=(10.^([ones(length(cfs),1) log10(cfs')]*a))'; sds=sigma_fs.*sqrt(2);    freqs=(0:floor(T/2)).*(srate/T); nfreqs=length(freqs); h=zeros(1,T);    if 2*fix(T/2)==T, h([1 T/2+1])=1; h(2:T/2)=2; else h(1)=1; h(2:(T+1)/2)=2; end;    adat=zeros(npbs,T);    for ch=goodchans(goodchans<65)        Z=fft(gdat(ch,:),T);        for f=1:npbs            H=zeros(1,T); k=freqs-cfs(f); H(1:nfreqs)=exp((-0.5).*((k./sds(f)).^2)); H(nfreqs+1:end)=fliplr(H(2:ceil(T/2))); H(1)=0;            adat(f,:)=abs(ifft(Z.*(H.*h),T));        end        gdat(ch,:)=mean(adat);    end    if nvarchans>0        for ch=goodchans(goodchans>64)            Z=fft(vdat(ch-64,:),T);            for f=1:npbs                H=zeros(1,T); k=freqs-cfs(f); H(1:nfreqs)=exp((-0.5).*((k./sds(f)).^2)); H(nfreqs+1:end)=fliplr(H(2:ceil(T/2))); H(1)=0;                adat(f,:)=abs(ifft(Z.*(H.*h),T));            end            vdat(ch-64,:)=mean(adat);        end    endelse    gdat(goodchans(goodchans<65),:)=eegfilt(gdat(goodchans(goodchans<65),:),srate,0,52);    if nvarchans>0, vdat(goodchans(goodchans>64)-64,:)=eegfilt(vdat(goodchans(goodchans>64)-64,:),srate,0,52); endendload(['C:\Intrac\Subjs\' subjstr '\Trialslogs\ev' int2str(bnum)]);load(['C:\Intrac\Subjs\' subjstr '\Artrejs2\eprej' int2str(bnum)]); eprej(eprej~=1)=0;cd(['C:\Intrac\Subjs\' subjstr '\raERPs\Cardat\' int2str(cnd) '\' int2str(fband)]);if sbcnd<3    useeps2=find(sum(eprej(:,1:end-1,1))>0 & sum(eprej(:,1:end-1,2))>0);    rts=(ev(useeps2,3)-ev(useeps2,1))./2003; soas=(ev(useeps2+1,1)-ev(useeps2,1))./2003;    useeps2=useeps2(rts>.525 & soas-rts>.4); %excludes rts extending into next 400 ms prestim baseline    rts=ev(useeps2,3)-ev(useeps2,1); medrt=round(median(rts)); %[min(rts./2003) mean(rts./2003) medrt/2003 max(rts./2003)]    soas=ev(useeps2,1)-ev(useeps2-1,1); soas=soas./2003; medsoa=median(soas); %median only for kept trials    ro2nsos=ev(useeps2+1,1)-ev(useeps2,3); ro2nsos=ro2nsos./2003; %[min(ro2nsos) median(ro2nsos) max(ro2nsos)]    save goodchans goodchans; save(['useeps2' int2str(sbcnd)],'useeps2'); if fband<10, save cfs cfs; end    save(['rts' int2str(sbcnd)],'rts'); save(['medrt' int2str(sbcnd)],'medrt'); save(['ro2nsos' int2str(sbcnd)],'ro2nsos');else load medrt0; save(['medrt' int2str(sbcnd)],'medrt'); endnsamps_ep=sum(epch)+1; ERP_X=-epch(1)*1000/srate:1000/srate:epch(2)*1000/srate;epch1=[501 701]; epch2=[200 epch(2)-medrt]; nsamps_ep1=sum(epch1)+1; nsamps_ep2=sum(epch2)+1;ERP_X1=ERP_X(1:nsamps_ep1); ERP_X2=ERP_X(nsamps_ep-sum(epch2):nsamps_ep);nsamps_dep=length(ERP_Xd); zsn=find(ERP_Xd==0);ERPs=zeros(nchans,nsamps_dep,2); ns=zeros(2,nchans); bslevs=zeros(nchans,2);test_samps=zsn+3:5:nsamps_dep-2; %samps to test for pvals (every 20 ms)test_samps_bs=fliplr(zsn-2:-5:3); %test_samps=[test_samps_bs handles.baselineFiltered];if do_stats, ps=repmat(NaN,size(ERPs)); endif do_stats2, ps2=repmat(NaN,[nchans nsamps_dep]); end %ps for 2-cond comparisonchcnt=0;for ch=goodchans, chcnt=chcnt+1;    if ch>64, dat=vdat(ch-64,:); else dat=gdat(ch,:); end        if sbcnd==0        useeps1=find(eprej(ch,:,1)'==1 & ismember(ev(:,2),nontargs) & ev(:,3)==0 & ev(:,4)==0)';    elseif sbcnd==1, %useeps1=intersect(useeps2-1,find(eprej(ch,:,1)==1));        useeps1=find(eprej(ch,:,1)'==1 & ismember(ev(:,2),nontargs) & ev(:,3)==0 & ev(:,4)==0)';    elseif sbcnd==2, %useeps1=intersect(useeps2-2,find(eprej(ch,:,1)==1));        useeps1=find(eprej(ch,:,1)'==1 & ismember(ev(:,2),nontargs) & ev(:,3)==0 & ev(:,4)==0)';    else useeps1=find(eprej(ch,:,1)'==1 & ismember(ev(:,2),nontargs))'; end    if sbcnd<3        useeps2=find(eprej(ch,1:end-1,1)==1 & eprej(ch,1:end-1,2)==1);         rts=(ev(useeps2,3)-ev(useeps2,1))./2003; soas=(ev(useeps2+1,1)-ev(useeps2,1))./2003;        useeps2=useeps2(rts>.525 & soas-rts>.4);    else useeps2=find(eprej(ch,:,1)'==1 & ismember(ev(:,2),targs))'; end    neps1=length(useeps1); neps2=length(useeps2);    ns(1,chcnt)=neps1; ns(2,chcnt)=neps2;    useeps=[useeps1 useeps2]; neps=length(useeps);    sts=zeros(neps,nsamps_dep); cnt=0;    for ep=useeps1, cnt=cnt+1;        tmp=dat(ev(ep,1)-epch(1):ev(ep,1)+epch(2)); tmp=interp1q(ERP_X',tmp',ERP_Xd')';        sts(cnt,:)=tmp;    end    for ep=useeps2, cnt=cnt+1;        if sbcnd<3            tmp=dat(ev(ep,1)-epch1(1):ev(ep,3)+epch2(2));            ERP_X3=linspace(ERP_X1(end),ERP_X2(1),length(tmp)-nsamps_ep1-nsamps_ep2+2);            tmp_X=[ERP_X1 ERP_X3(2:end-1) ERP_X2]; tmp=interp1q(tmp_X',tmp',ERP_Xd')';        else tmp=dat(ev(ep,1)-epch(1):ev(ep,1)+epch(2)); tmp=interp1q(ERP_X',tmp',ERP_Xd')'; end        sts(cnt,:)=tmp;    end        bslevs(chcnt,1)=sum(sum(sts(1:neps1,1:zsn)))/(neps1*zsn);    bslevs(chcnt,2)=sum(sum(sts(neps1+1:end,1:zsn)))/(neps2*zsn);    if fband<10, sts(1:neps1,:)=100*sts(1:neps1,:)./bslevs(chcnt,1)-100;        sts(neps1+1:end,:)=100*sts(neps1+1:end,:)./bslevs(chcnt,2)-100;    else sts(1:neps1,:)=sts(1:neps1,:)-bslevs(chcnt,1);         sts(neps1+1:end,:)=sts(neps1+1:end,:)-bslevs(chcnt,2);     end    ERPs(chcnt,:,1)=sum(sts(1:neps1,:))./neps1; ERPs(chcnt,:,2)=sum(sts(neps1+1:end,:))./neps2;        %this replaces each sample in sts (except first 2 and last 2) by the    %mean of the surrounding 5 samples (20 ms moving window average)    for ep=1:neps, tmp=filter([.2 .2 .2 .2 .2],1,sts(ep,:)); sts(ep,3:end-2)=tmp(5:end); end        if do_stats        boot_means=zeros([1 nboot]);        for bi=1:nboot            trs=ceil(rand(1,neps1)*neps1);             boot_tsbs=ceil(rand(1,neps1)*(zsn-4))+2;            boot_tsbs=neps*(boot_tsbs-1)+trs;             boot_means(bi)=sum(sts(boot_tsbs))/neps1; %for each bootstrap iteration, take average of random sampling of baseline values across all reps for cond1        end        bse=sqrt(sum((mean(boot_means)-boot_means).^2)/(nboot-1));        tmps=intersect(find(abs(ERPs(chcnt,:,1))>bse),test_samps);        tmpJ=zeros([1 neps1]); %holds jacknife values for estimate of a        for s=tmps            tmp1=sts(1:neps1,s); m1=sum(tmp1)/neps1;            for bi=1:nboot                boot_means(bi)=sum(tmp1(ceil(rand(1,neps1)*neps1)))/neps1;            end            if ERPs(chcnt,s,1)>0, ps(chcnt,s,1)=length(find(boot_means<bse))/nboot;            else ps(chcnt,s,1)=length(find(boot_means>-bse))/nboot; end            if ps(chcnt,s,1)==0, ps(chcnt,s,1)=1/nboot; end            if ps(chcnt,s,1)==1, ps(chcnt,s,1)=(nboot-1)/nboot; end            z0=length(find(boot_means<m1))/nboot;            z0=-sqrt(2).*erfcinv(2*z0); %z0=norminv(z0,0,1);            w0=-sqrt(2).*erfcinv(2*ps(chcnt,s,1)); %w0=norminv(ps(chcnt,s,1),0,1);            %a=z0; %for now, since this is good estimate in one-parameter families            tmpJ(neps1)=sum(tmp1(1:neps1-1))/(neps1-1);            for ep=1:neps1-1, tmpJ(ep)=sum(tmp1([1:ep-1 ep+1:neps1]))/(neps1-1); end            a=sum((m1-tmpJ).^3)/(6*(sum((m1-tmpJ).^2)^1.5));            ps(chcnt,s,1)=.5*erfc(-((w0-z0)/(1+a*(w0-z0))-z0)./sqrt(2)); %ps(chcnt,s,1)=normcdf((w0-z0)/(1+a*(w0-z0))-z0);        end        ps(chcnt,:,1)=2*min(ps(chcnt,:,1),1-ps(chcnt,:,1));    end        if do_stats        boot_means=zeros([1 nboot]);        for bi=1:nboot            trs=ceil(rand(1,neps2)*neps2)+neps1; boot_tsbs=ceil(rand(1,neps2)*(zsn-4))+2;            boot_tsbs=neps*(boot_tsbs-1)+trs; boot_means(bi)=sum(sts(boot_tsbs))/neps2;        end        bse=sqrt(sum((mean(boot_means)-boot_means).^2)/(nboot-1));        tmps=intersect(find(abs(ERPs(chcnt,:,2))>bse),test_samps);        tmpJ=zeros([1 neps2]); %holds jacknife values for estimate of a        for s=tmps            tmp2=sts(neps1+1:end,s); m2=sum(tmp2)/neps2;            for bi=1:nboot                boot_means(bi)=sum(tmp2(ceil(rand(1,neps2)*neps2)))/neps2;            end            if ERPs(chcnt,s,2)>0, ps(chcnt,s,2)=length(find(boot_means<bse))/nboot;            else ps(chcnt,s,2)=length(find(boot_means>-bse))/nboot; end            if ps(chcnt,s,2)==0, ps(chcnt,s,2)=1/nboot; end            if ps(chcnt,s,2)==1, ps(chcnt,s,2)=(nboot-1)/nboot; end            z0=length(find(boot_means<m2))/nboot;            z0=-sqrt(2).*erfcinv(2*z0); w0=-sqrt(2).*erfcinv(2*ps(chcnt,s,2));            tmpJ(neps2)=sum(tmp2(1:neps2-1))/(neps2-1);            for ep=1:neps2-1, tmpJ(ep)=sum(tmp2([1:ep-1 ep+1:neps2]))/(neps2-1); end            a=sum((m2-tmpJ).^3)/(6*(sum((m2-tmpJ).^2)^1.5));            ps(chcnt,s,2)=.5*erfc(-((w0-z0)/(1+a*(w0-z0))-z0)./sqrt(2));        end        ps(chcnt,:,2)=2*min(ps(chcnt,:,2),1-ps(chcnt,:,2));    end        if do_stats2        boot_means=zeros([1 nboot2]);        for bi=1:nboot2            trs=ceil(rand(1,neps2)*neps2)+neps1; boot_tsbs=ceil(rand(1,neps2)*(zsn-4))+2;            boot_tsbs=neps*(boot_tsbs-1)+trs; boot_means(bi)=sum(sts(boot_tsbs))/neps2;                trs=ceil(rand(1,neps1)*neps1); boot_tsbs=ceil(rand(1,neps1)*(zsn-4))+2;            boot_tsbs=neps*(boot_tsbs-1)+trs; boot_means(bi)=boot_means(bi)-sum(sts(boot_tsbs))/neps1;        end        bse=sqrt(sum((mean(boot_means)-boot_means).^2)/(nboot-1));        diffERP=ERPs(chcnt,:,2)-ERPs(chcnt,:,1);        tmps=intersect(find(abs(diffERP(1:end-2))>bse & (ps(chcnt,:,1)<.05 | ps(chcnt,:,2)<.05)),test_samps);%diffERP changed to diffERP(1:end-2)        for s=tmps            tmp1=sts(1:neps1,s); m1=sum(tmp1)/neps1;            tmp2=sts(neps1+1:end,s); m2=sum(tmp2)/neps2; m=m2-m1;            for bi=1:nboot2                boot_means(bi)=sum(tmp2(ceil(rand(1,neps2)*neps2)))/neps2;                boot_means(bi)=boot_means(bi)-sum(tmp1(ceil(rand(1,neps1)*neps1)))/neps1;            end            if diffERP(s)>0, ps2(chcnt,s)=length(find(boot_means<bse))/nboot2;            else ps2(chcnt,s)=length(find(boot_means>-bse))/nboot2; end            if ps2(chcnt,s)==0, ps2(chcnt,s)=1/nboot2; end            if ps2(chcnt,s)==1, ps2(chcnt,s)=(nboot2-1)/nboot2; end            z0=length(find(boot_means<m))/nboot2;            z0=-sqrt(2).*erfcinv(2*z0); w0=-sqrt(2).*erfcinv(2*ps2(chcnt,s));            a=z0;            ps2(chcnt,s)=.5*erfc(-((w0-z0)/(1+a*(w0-z0))-z0)./sqrt(2));        end        ps2(chcnt,:)=2*min(ps2(chcnt,:),1-ps2(chcnt,:));    endendsave(['ERPs' int2str(sbcnd)],'ERPs'); save(['bslevs' int2str(sbcnd)],'bslevs');save(['ns' int2str(sbcnd)],'ns'); save(['ERP_Xd' int2str(sbcnd)],'ERP_Xd');save(['useeps2' int2str(sbcnd)],'useeps2');if do_stats    save(['ps_raw' int2str(sbcnd)],'ps');    ps(~isnan(ps))=MT_FDR_PRDS(ps(~isnan(ps))); save(['ps_fdr' int2str(sbcnd)],'ps');endif do_stats2    save(['ps2_raw' int2str(sbcnd)],'ps2');    ps2(~(ps(:,:,1)<0.05) & ~(ps(:,:,2)<0.05))=NaN;    ps2(~isnan(ps2))=MT_FDR_PRDS(ps2(~isnan(ps2)));    save(['ps2_fdr' int2str(sbcnd)],'ps2');end